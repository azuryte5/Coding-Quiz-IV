// Var needed throughout script. timer and count are counters that track the score and which question is presented, if view highscore gets clicked the timer/game stops.
var timer = 75;
var count = -1;
var highScoreStop = 0;
// Start button is generated by Javascript and other variables are declared
var gameNewBtnEl = document.getElementById("eventWindow");
gameNewBtnEl.innerHTML = "<button id='start'>Start Button</button>";
var optionSpot = document.getElementById("options");
var buttonLocation = document.querySelector("#eventWindow");
var hideScoreEl = document.getElementById("hsPage");

// Main function. Calls another question function once an answer is given.
var question = function () {
  //Count goes up each time question gets called, previous content is cleared from display
  gameNewBtnEl.innerHTML = "";
  count++;

  //Array containing questions and possible answers
  questionArray = [
    {
      q: "In the Box Model, content is displayed in what area?",
      a: "Content box",
      b: "Padding box",
      c: "Border box",
      d: "Margin box",
    },
    {
      q: "Which justify-content property value is being described? -items are evenly distributed in the line with equal space around them. Note that visually the spaces arenâ€™t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.",
      a: "Center",
      b: "Space-between",
      c: "Space-around",
      d: "Space-evenly",
    },
    {
      q: "Which Java Script Comparison Operator means not equal value or not equal type?",
      a: "!==",
      b: "==",
      c: "===",
      d: "!=",
    },
    {
      q: "var fruit = ['banana', 'apple', 'avocado', 'mango', 'orange', 'grape'] Which one is fruit[4]?",
      a: "avocado",
      b: "grape",
      c: "mango",
      d: "orange",
    },
    {
      q: "DOM stands for?",
      a: "Direction Output Mobile",
      b: "Document Object Model",
      c: "Directory Object Module",
      d: "Development Open Mockup",
    },
    // In order for game to end via questions I needed questionArray[5] to be added to avoid error
    {},
  ];
  // elements getting generated to display questions
  var questionDisplay = document.getElementById("question");
  questionDisplay.textContent = questionArray[count].q;

  var optionListAEl = document.getElementById("a");
  var optionListBEl = document.getElementById("b");
  var optionListCEl = document.getElementById("c");
  var optionListDEl = document.getElementById("d");

  optionListAEl.innerHTML = "<button>" + questionArray[count].a + "</button>";
  optionListBEl.innerHTML = "<button>" + questionArray[count].b + "</button>";
  optionListCEl.innerHTML = "<button>" + questionArray[count].c + "</button>";
  optionListDEl.innerHTML = "<button>" + questionArray[count].d + "</button>";
  // Stopping condition is when count is 5, locating the end of count 4 was too hard. this was easier to solve
  if (count === 5) {
    optionListAEl.remove();
    optionListBEl.remove();
    optionListCEl.remove();
    optionListDEl.remove();
    return;
  }
  // This section checks the result given by user and runs either wrongAnswer() or rightAnswer(). Calls a new question()
  optionListAEl.onclick = function () {
    if (count === 1 || count === 3 || count === 4) {
      wrongAnswer();
      question();
    } else {
      rightAnswer();
      question();
    }
    //console.log(count);
  };
  optionListBEl.onclick = function () {
    if (count === 0 || count === 1 || count === 2 || count === 3) {
      wrongAnswer();
      question();
    } else {
      rightAnswer();
      question();
    }
    //console.log(count);
  };
  optionListCEl.onclick = function () {
    if (count === 0 || count === 2 || count === 3 || count === 4) {
      wrongAnswer();
      question();
    } else {
      rightAnswer();
      question();
    }
    // console.log(count);
  };
  optionListDEl.onclick = function () {
    if (count === 0 || count === 1 || count === 2 || count === 4) {
      wrongAnswer();
      question();
    } else {
      rightAnswer();
      question();
    }
    //console.log(count);
  };
};
// Timer is at the end. endGame is run when count = 5 || timer = 0. code displays score and form
var endGame = function () {
  endScreenEl = document.getElementById("question");
  endScreenEl.textContent = "Your final score was " + timer;
  var playerNameForm = document.createElement("form");
  var playerNameLabel = document.createElement("h2");
  playerNameLabel.textContent = "Enter your initials: ";
  var playerNameInput = document.createElement("input");
  playerNameInput.setAttribute("id", "initial");
  playerNameInput.setAttribute("placeholder", "Ex. AL");
  var playerNameSubmit = document.createElement("button");
  playerNameSubmit.setAttribute("type", "submit");
  playerNameSubmit.textContent = "Submit Score";

  // Stores initials and score then runs highScore() on submit
  playerNameSubmit.addEventListener("click", function (event) {
    event.preventDefault();
    var initials = document.querySelector("#initial").value;

    localStorage.setItem("score", timer);
    localStorage.setItem("initials", initials);
    highScore();
  });

  playerNameForm.appendChild(playerNameLabel);
  playerNameForm.appendChild(playerNameInput);
  playerNameForm.appendChild(playerNameSubmit);
  endScreenEl.appendChild(playerNameForm);
};
// Displays highscore "page". Shows previous score and option to play again. reset scores
var highScore = function () {
  var nextPage = document.getElementById("question");
  nextPage.innerHTML = "High Score";
  //code for attaching scores as a list
  var name = localStorage.getItem("initials");
  var score = localStorage.getItem("score");
  var listItemEl = document.createElement("li");
  listItemEl.textContent = name + " score of " + score;
  listItemEl.setAttribute("id", "scoreBoard");
  options.appendChild(listItemEl);

  // code for playing again
  var insertToken = document.getElementById("eventWindow");
  var quarter = document.createElement("button");
  quarter.setAttribute("id", "playerReady");
  quarter.textContent = "Try Again";
  insertToken.appendChild(quarter);
  playerReady.addEventListener("click", function () {
    timer = 100;
    count = -1;
    startGame();
  });
  // code for resetting scoreboard
  var reset = document.createElement("button");
  reset.innerHTML = "<button id='resetScore'>Reset Scores</button>";
  insertToken.appendChild(reset);
  reset.addEventListener("click", function () {
    var deleted = document.getElementById("options");
    deleted.innerHTML = " ";
  });
};
//Bug Notice. After score is submitted and try again is selected. The li id="scoreboard" persists. I could not remove this without further errors. If kept, question() runs smoothly.
//reset clears and works normally

// wrongAnswer runs when an incorrect answer is selected. timer score reduced and message appears briefly. Shotclock/setinterval and set timeout produced what I wanted.
wrongAnswer = function () {
  timer = timer - 10;
  shotClock = 1;

  wrong = setInterval(function () {
    if (shotClock <= 0) {
      clearInterval(wrong);
      return;
    }
    var answerDisplayEl = document.getElementById("eventWindow");
    var onscreenEl = document.createElement("h3");
    onscreenEl.textContent = "Wrong answer";
    onscreenEl.setAttribute("style", "color:var(--secondary-colour");
    onscreenEl.setAttribute("id", "wrongSign");
    answerDisplayEl.appendChild(onscreenEl);
    shotClock--;

    setTimeout(function () {
      onscreenEl.remove();
    }, 1000);
  }, 1000);
};
// rightAnswer() runs when answer is correct.
rightAnswer = function () {
  shotClock = 1;

  wrong = setInterval(function () {
    if (shotClock <= 0) {
      clearInterval(wrong);
      return;
    }
    var answerDisplayEl = document.getElementById("eventWindow");
    var onscreenEl = document.createElement("h3");
    onscreenEl.textContent = "Correct answer";
    onscreenEl.setAttribute("style", "color:var(--secondary-colour");
    onscreenEl.setAttribute("id", "wrongSign");
    answerDisplayEl.appendChild(onscreenEl);
    shotClock--;

    setTimeout(function () {
      onscreenEl.remove();
    }, 1000);
  }, 1000);
};
// Runs when Start button is clicked. Makes question elements and runs the clock() and questions ()
var startGame = function () {
  var optionSpot = document.getElementById("options");
  var optionListAEl = document.createElement("li");
  var optionListBEl = document.createElement("li");
  var optionListCEl = document.createElement("li");
  var optionListDEl = document.createElement("li");

  optionListAEl.setAttribute("id", "a");
  optionListBEl.setAttribute("id", "b");
  optionListCEl.setAttribute("id", "c");
  optionListDEl.setAttribute("id", "d");

  optionSpot.appendChild(optionListAEl);
  optionSpot.appendChild(optionListBEl);
  optionSpot.appendChild(optionListCEl);
  optionSpot.appendChild(optionListDEl);
  countdown();
  question();
};
// Clock for timer. It has two stopping conditions. 1) when count is more than four 2) when timer hits 0 3) when viewhighscore is pressed This was a huge challenge. I kept making new countdowns instead of stopping the 1st one that was running.
var countdown = function () {
  var clock = setInterval(function () {
    var scoreClock = document.getElementById("scoreClock");
    console.log(count);
    if (count > 4 || timer <= 0) {
      clearInterval(clock);
      endGame();
      return;
    }
    if (highScoreStop === 1) {
      var deleteA = document.getElementById("a");
      deleteA.remove();
      var deleteB = document.getElementById("b");
      deleteB.remove();
      var deleteC = document.getElementById("c");
      deleteC.remove();
      var deleteD = document.getElementById("d");
      deleteD.remove();
      clearInterval(clock);
      return;
    }
    if (timer >= 1) {
      timer--;
      scoreClock.textContent = "You have " + timer + " second(s) left";
    }
  }, 1000);
};
// Starts game on click, shows highscore on click
start.onclick = startGame;
hideScoreEl.onclick = function () {
  highScoreStop++;
  highScore();
};
